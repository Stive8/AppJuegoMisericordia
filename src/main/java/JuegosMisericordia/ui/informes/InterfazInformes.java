package JuegosMisericordia.ui.informes;

import JuegosMisericordia.model.Empleado;
import JuegosMisericordia.model.Venta;
import JuegosMisericordia.ui.PanelAdmin;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PrinterException;
import java.time.LocalDate;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;

public class InterfazInformes extends JFrame {

    /**
     * Creates new form InterfazInformes
     */
    public InterfazInformes() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel1 = new JPanel();
        jLabel1 = new JLabel();
        volverButton = new JButton();
        productosMasVendidosButton = new JButton();
        deVentasButton = new JButton();
        deEmpleadosButton = new JButton();
        jLabel2 = new JLabel();
        imprimirButton = new JButton();
        jSeparator1 = new JSeparator();
        jScrollPane1 = new JScrollPane();
        jTextArea1 = new JTextArea();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new Color(255, 255, 255));
        jPanel1.setPreferredSize(new Dimension(1000, 600));
        jPanel1.setLayout(null);

        jLabel1.setFont(new Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setForeground(new Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel1.setText("--------------------------------------");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(40, 330, 290, 50);

        volverButton.setText("Volver");
        volverButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                volverButtonActionPerformed(evt);
            }
        });
        jPanel1.add(volverButton);
        volverButton.setBounds(50, 530, 90, 30);

        productosMasVendidosButton.setText("Productos más vendidos");
        productosMasVendidosButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                productosMasVendidosButtonActionPerformed(evt);
            }
        });
        jPanel1.add(productosMasVendidosButton);
        productosMasVendidosButton.setBounds(50, 170, 270, 40);

        deVentasButton.setText("De ventas");
        deVentasButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                deVentasButtonActionPerformed(evt);
            }
        });
        jPanel1.add(deVentasButton);
        deVentasButton.setBounds(50, 230, 270, 40);

        deEmpleadosButton.setText("De empleados");
        deEmpleadosButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                deEmpleadosButtonActionPerformed(evt);
            }
        });
        jPanel1.add(deEmpleadosButton);
        deEmpleadosButton.setBounds(50, 290, 270, 40);

        jLabel2.setFont(new Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setForeground(new Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel2.setText("Seleccione el tipo de informe");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(20, 100, 330, 50);

        imprimirButton.setText("Imprimir / Guardar");
        imprimirButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                imprimirButtonActionPerformed(evt);
            }
        });
        jPanel1.add(imprimirButton);
        imprimirButton.setBounds(50, 390, 270, 40);

        jSeparator1.setOrientation(SwingConstants.VERTICAL);
        jPanel1.add(jSeparator1);
        jSeparator1.setBounds(370, 0, 10, 600);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(400, 20, 580, 560);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void volverButtonActionPerformed(ActionEvent evt) {
        PanelAdmin panelAdmin = new PanelAdmin();
        panelAdmin.setVisible(true);
        panelAdmin.setLocationRelativeTo(null);
        this.dispose();
    }

    private void productosMasVendidosButtonActionPerformed(ActionEvent evt) {
        //Encabezado Informe
        jTextArea1.setText("SISTEMA INTEGRADO DE GESTION - JUEGOS MISERICORDIA \n" +
                "INFORME DE PRODUCTOS MAS VENDIDOS\n" +
                "FECHA: " + LocalDate.now() + "\n" +
                "\n" +
                "---------------------------------------" +
                "\n \n"
        );


    }

    private void deEmpleadosButtonActionPerformed(ActionEvent evt) {
        double nomina = 0;

        //Encabezado Informe
        jTextArea1.setText("SISTEMA INTEGRADO DE GESTION - JUEGOS MISERICORDIA \n" +
                "INFORME DE EMPLEADOS CONTRATADOS\n" +
                "FECHA: " + LocalDate.now() + "\n" +
                "\n" +
                "---------------------------------------" +
                "\n \n"
        );

        //Imprimir empleados y actualizar nómina
        //TODO CAMBIAR DECLARACION PARA LLAMAR METODO QUE DE TODOS LOS EMPLEADOS
        List<Empleado> empleados = List.of();

        for (Empleado empleado : empleados){
            if (empleado.getEstado().equals(Empleado.ESTADO_ACTIVO)){
                jTextArea1.setText(jTextArea1.getText() + "ID: " + empleado.getId() + "\n");
                jTextArea1.setText(jTextArea1.getText() + "NOMBRE: " + empleado.getUsername() + "\n");
                jTextArea1.setText(jTextArea1.getText() + "ROL: " + empleado.getRol() + "\n");
                jTextArea1.setText(jTextArea1.getText() + "SALARIO: " + empleado.getSalario() + "$" + "\n");
                jTextArea1.setText(jTextArea1.getText() + "---------------------------------------" + "\n" + "\n");

                nomina += empleado.getSalario();
            }
        }

        //Imprimir Nomina
        jTextArea1.setText(jTextArea1.getText() + "--------------------------------------- \n" +
                "NOMINA TOTAL DE LA EMPRESA: \n" + nomina + "$" + "\n"
                +  "--------------------------------------- \n"
        );
    }

    private LocalDate verificarFormatoFechaInicio(){
        while(true){
            String fechaInicioString = JOptionPane.showInputDialog(null, "Por favor ingrese la fecha de inicio del reporte (YYYY-MM-DD)", "Generación Reporte", JOptionPane.INFORMATION_MESSAGE);
            if (fechaInicioString == null){
                return null;
            }else{
                try{
                    return LocalDate.parse(fechaInicioString);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Formato Inválido en la Fecha, intente de nuevo", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    private LocalDate verificarFormatoFechaFin(){
        while(true){
            String fechaFinString = JOptionPane.showInputDialog(null, "Por favor ingrese la fecha de fin del reporte (YYYY-MM-DD)", "Generación Reporte", JOptionPane.INFORMATION_MESSAGE);
            if (fechaFinString == null){
                return null;
            }else{
                try{
                    return LocalDate.parse(fechaFinString);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Formato Inválido en la Fecha, intente de nuevo", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }


    private void deVentasButtonActionPerformed(ActionEvent evt) {
        double totalVentas = 0;

        //Ingresar las fechas de inicio y fin y validar el formato
        LocalDate fechaInicioValida = verificarFormatoFechaInicio();
        if(fechaInicioValida == null){
            JOptionPane.showMessageDialog(null, "Generación de informe cancelada", "Cancelación", JOptionPane.WARNING_MESSAGE);
            return;
        }


        LocalDate fechaFinValida = verificarFormatoFechaFin();
        if(fechaFinValida == null){
            JOptionPane.showMessageDialog(null, "Generación de informe cancelada", "Cancelación", JOptionPane.WARNING_MESSAGE);
            return;
        }


        //Encabezado Informe
        jTextArea1.setText("SISTEMA INTEGRADO DE GESTION - JUEGOS MISERICORDIA \n" +
                "INFORME DE VENTAS ENTRE " + fechaInicioValida + " Y " + fechaFinValida + "\n" +
                "FECHA: " + LocalDate.now() + "\n" +
                "\n" +
                "---------------------------------------" +
                "\n \n"
        );

        //TODO Cambiar declaracion por el metodo que retorna todas las ventas
        List<Venta> ventas = List.of();

        //Filtrar Ventas por fecha
        List<Venta> ventasFiltradas = ventas.stream()
                .filter(venta -> {
                    LocalDate fechaVenta = venta.getFechaHora().toLocalDate();
                    LocalDate desde = fechaInicioValida;
                    LocalDate hasta = fechaFinValida;
                    return !fechaVenta.isBefore(desde) && !fechaVenta.isAfter(hasta);
                }).collect(Collectors.toList());

        //Imprimir Ventas y Calcular total vendido
        for (Venta venta : ventasFiltradas){
            jTextArea1.setText(jTextArea1.getText() + "NÚMERO DE VENTA: " + venta.getNumeroVenta() + "\n");
            jTextArea1.setText(jTextArea1.getText() + "FECHA Y HORA: " + venta.getFechaHora() + "\n");
            jTextArea1.setText(jTextArea1.getText() + "VENDEDOR: " + venta.getVendedor().getUsername() + "\n");
            jTextArea1.setText(jTextArea1.getText() + "TIPO DE PAGO " + venta.getTipoPago()+ "\n");
            jTextArea1.setText(jTextArea1.getText() + "VALOR: " + venta.getMontoTotal() + "$" + "\n");
            jTextArea1.setText(jTextArea1.getText() + "---------------------------------------" + "\n" + "\n");

            totalVentas += venta.getMontoTotal();
        }

        jTextArea1.setText(jTextArea1.getText() + "--------------------------------------- \n" +
                "TOTAL INGRESOS ENTRE " + fechaInicioValida + " Y " + fechaFinValida + ":\n" + totalVentas + "$" + "\n"
                +  "--------------------------------------- \n"
        );


    }

    private void imprimirButtonActionPerformed(ActionEvent evt) {
        try {
            jTextArea1.print();
        } catch (PrinterException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(InterfazInformes.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(InterfazInformes.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(InterfazInformes.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(InterfazInformes.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazInformes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private JButton deEmpleadosButton;
    private JButton deVentasButton;
    private JButton imprimirButton;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JPanel jPanel1;
    private JScrollPane jScrollPane1;
    private JSeparator jSeparator1;
    private JTextArea jTextArea1;
    private JButton productosMasVendidosButton;
    private JButton volverButton;
    // End of variables declaration
}